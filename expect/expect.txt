
我期望我的程式是能夠達到有規律、可讀性、可延展性、順利維護及可交接的樣子

有規律的是有明確的位置擺放及規律的命名
  例如若要找統一的路徑設定，會依照共同理解(Ex: etc/)找到相對應的設定檔
  例如要異動參數時可以藉由搜尋名稱來找到
 
可讀性
  在判讀邏輯時，能夠以變數名稱來理解這個區塊的邏輯意義
  在找尋功能時，能夠以函示名稱來理解主要功能

可延展性
  在新增功能時，能夠以原本的基底往下寫

順利維護即可交接
  能讓未來需要維護或者接手案子的人，能夠快速上手及理解整個案子的架構脈絡
  可能還需要搭配文件，才更快更能理解其中意義

以上是我的期待，也會在接收新的資訊時持續修正。

---

身為一位專業開發者 ，現在是周一早上 10 點，請問以下工作項目，您會如何安排一周的工作次序

(A) 重量級客戶 10 天前提出的改進需求，需耗時 6 小時完成，此需求評估為非常實用

(B) 昨天晚上系統發出的 alert, 警示訊息為客戶操作出錯

(C) 早上 9 點系統發出的 alert, 警示訊息為 DB 連線異常

(D) 正在開發中的功能，你發現 PM 規劃的架構圖可能會有嚴重瑕疵

(E) 近三天專注開發的一項功能，如果現在不接著工作，很可能會忘記重要事項

(F) 這周預計完成的某項功能，上周已被順手處理掉，可向 PM 進行回報


安排工作會有以下大原則
1.上線系統正常運作為主，有問題須先查看。若有狀況，則斟酌其嚴重性來決定是否先修復
2.若客戶有提需求，先詢問窗口或PM是否有期望deadline(或者其實這是emergency的事情)
3.若有共同合作的事宜，能短暫就先回復，但若需要討論，就需要另外約時間
4.開發過程，自己需紀錄完整以便面臨被強迫中斷的狀況(Ex: 緊急的工項)


A_1 釐清改進需求
A_2 理解程式並制定改進方向
A_3 實際修改(需要專注長時間不被打斷)

B_1 釐清alert狀況
B_2 若為小異動盡速修改，若為大異動則安排時間

C_1 釐清異常狀況
C_2 修復

D_1 短時間告知PM，結束
D_2 若須討論(Ex: 半小時以上)，則需另外約時間

E 實際修改

F 短時間(10分鐘內)直接回報PM


Monday    早上: F D C_1 下午: C_2 E
Tuesday   早上: D_2     下午: B_1 B_2
Wednesday 早上: A_1 A_2 下午: E
Tuesday   早上: E       下午: A
Friday    早上: A       下午: A

雖然表定是這樣，但是實際花費時間及穿插事項可能遠遠超過預估
還是會以大原則為基準，若有疑問則會詢問PM